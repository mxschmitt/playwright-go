package playwright

import (
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path"
	"runtime"
)

const browsersJSON = `{
  "comment": "Do not edit this file, use utils/roll_browser.js",
  "browsers": [
    {
      "name": "chromium",
      "revision": "792639",
      "download": true
    },
    {
      "name": "firefox",
      "revision": "1154",
      "download": true
    },
    {
      "name": "webkit",
      "revision": "1322",
      "download": true
    }
  ]
}`

func getDriverURL() (string, string) {
	const baseURL = "https://storage.googleapis.com/mxschmitt-public-files/"
	const folder = "playwright-driver-1596843106133"
	driverName := ""
	switch runtime.GOOS {
	case "windows":
		driverName = "driver-win.exe"
		break
	case "darwin":
		driverName = "driver-macos"
		break
	case "linux":
		driverName = "driver-linux"
		break
	}
	return fmt.Sprintf("%s%s/%s", baseURL, folder, driverName), driverName
}

func installDriver() (string, error) {
	driverURL, driverName := getDriverURL()
	driverPath := path.Join(os.TempDir(), driverName)
	if _, err := os.Stat(driverPath); os.IsNotExist(err) {
		log.Println("Downloading driver...")
		resp, err := http.Get(driverURL)
		if err != nil {
			return "", fmt.Errorf("could not download driver: %v", err)
		}
		outFile, err := os.Create(driverPath)
		if err != nil {
			return "", fmt.Errorf("could not create driver: %v", err)
		}
		if _, err = io.Copy(outFile, resp.Body); err != nil {
			return "", fmt.Errorf("could not copy response body to file: %v", err)
		}
		if err := outFile.Close(); err != nil {
			return "", fmt.Errorf("could not close file (driver): %v", err)
		}

		if runtime.GOOS != "windows" {
			stats, err := os.Stat(driverPath)
			if err != nil {
				return "", fmt.Errorf("could not stat driver: %v", err)
			}
			if err := os.Chmod(driverPath, stats.Mode()|0x40); err != nil {
				return "", fmt.Errorf("could not set permissions: %v", err)
			}
		}
		// TODO: rework
		ioutil.WriteFile(path.Join(os.TempDir(), "browsers.json"), []byte(browsersJSON), 0644)
		fmt.Println("Downloaded driver successfully")
	}
	return driverPath, nil
}

func installBrowsers(driverPath string) error {
	cmd := exec.Command(driverPath, "install")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Start(); err != nil {
		return fmt.Errorf("could not start driver: %v", err)
	}
	return cmd.Wait()
}

// Install does download the driver and the browsers. If not called manually
// before playwright.Run() it will get executed there and might take a few seconds
// to download the Playwright suite.
func Install() error {
	driverPath, err := installDriver()
	if err != nil {
		return fmt.Errorf("could not install driver: %v", err)
	}
	if err := installBrowsers(driverPath); err != nil {
		return fmt.Errorf("could not install browsers: %v", err)
	}
	return nil
}

func Run() (*Playwright, error) {
	driverPath, err := installDriver()
	if err != nil {
		return nil, fmt.Errorf("could not install driver: %v", err)
	}
	if err := installBrowsers(driverPath); err != nil {
		return nil, fmt.Errorf("could not install browsers: %v", err)
	}

	cmd := exec.Command(driverPath)
	cmd.Stderr = os.Stderr
	stdin, err := cmd.StdinPipe()
	if err != nil {
		return nil, fmt.Errorf("could not get stdin pipe: %v", err)
	}
	stdout, err := cmd.StdoutPipe()
	if err != nil {
		return nil, fmt.Errorf("could not get stdout pipe: %v", err)
	}
	if err := cmd.Start(); err != nil {
		return nil, fmt.Errorf("could not start driver: %v", err)
	}
	connection := newConnection(stdin, stdout, cmd.Process.Kill)
	go func() {
		if err := connection.Start(); err != nil {
			log.Printf("could not start connection: %v", err)
		}
	}()
	obj, err := connection.CallOnObjectWithKnownName("Playwright")
	if err != nil {
		return nil, fmt.Errorf("could not call object: %v", err)
	}
	return obj.(*Playwright), nil
}
